name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened] # Executa em PRs abertos, atualizados ou reabertos
  push:
    branches: [main, beta] # Executa em pushes diretos nas branches main e beta

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Garante que todos os commits sejam buscados
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Commitlint
        if: github.event_name == 'pull_request'
        run: |
          npx commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.event.pull_request.head.sha }}

      - name: Run ESLint
        run: npx eslint .

  release:
    needs: lint-and-validate # Garante que o linting passe antes de prosseguir com a release
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Extract PR Information
        id: pr_info
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: |
          PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | sed 's/^[a-z]*\(:\s*\)\?//I')
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_TYPE=$(echo "${{ github.event.pull_request.title }}" | grep -oE '^(feat|fix|chore|docs|style|refactor|perf|test)')" >> $GITHUB_ENV

      - name: Prepare Semantic Release
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit --allow-empty -m "${{ env.PR_TYPE }}: ${{ env.PR_TITLE }}" || true

      - name: Run Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
